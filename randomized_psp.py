#!/usr/bin/env python3
import sys
import numpy as np
import mysql.connector as mysql
import math

import mysql_connection
from matrices import *
import MinMaxHeapTriplets
from MinMaxHeapTriplets import *
from QuickselectMinTriplets import *

class Comparisons:
    def __init__(self, initial_value=0):
        self.value = initial_value
    def increment(self, amount=1):
        self.value += amount

def retrieve_matrix(matrix_id):
    conn = mysql_connection.new_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT MatrixSeed, MRows FROM Matrices WHERE MatrixID = %s", (matrix_id,))
    result = cursor.fetchone()

    if result:
        seed, rows = result
        matrix = create_matrix_with_ssp(seed, rows)

    cursor.close()
    mysql_connection.close_connection(conn)
    return matrix, rows, matrix_id

def FindHorizontalPivot(matrix, CompsObj):
    t = 2 * len(matrix) # maximum entry within matrix generated by matrices.py
    rows = len(matrix)
    np.random.seed = 0
    while len(matrix) > 1:
        np.random.seed += 1 # forcing continued different random seeds
        setof_q_i = []
        for i in range(len(matrix)):
            np.random.seed += 1
            rand_k = np.random.randint(1, len(matrix[i]))
            setof_q_i.append([matrix[i][rand_k], i, rand_k])
        q_selected = select_kth_triplet(setof_q_i, math.floor((1/4) * len(setof_q_i)), CompsObj)
        t = min(t, q_selected[0])
        j = 0
        while j < len(matrix[q_selected[2]-1]):
            if matrix[q_selected[1], [j]] < t:
                matrix = np.delete(matrix, j, 1)
            else:
                j += 1

if __name__ == '__main__':
    MID = 3
    CompsObjRandom = Comparisons()
    matrix, rows, matrixid = retrieve_matrix(MID)
    print (matrix)
    FindHorizontalPivot(matrix, CompsObjRandom)